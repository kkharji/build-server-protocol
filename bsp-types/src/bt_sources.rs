use super::BuildTargetIdentifier;
use serde::{Deserialize, Serialize};

#[derive(Debug, Default, Serialize, Deserialize)]
/// The build target sources request is sent from the client to the server to
/// query for the list of text documents and directories that are belong to a
/// build target. The sources response must not include sources that are
/// external to the workspace.
pub struct BTSourcesParams {
    targets: Vec<BuildTargetIdentifier>,
}

impl BTSourcesParams {
    pub fn new(targets: Vec<BuildTargetIdentifier>) -> Self {
        Self { targets }
    }

    /// Get a reference to the bsp sources params's targets.
    pub fn targets(&self) -> &[BuildTargetIdentifier] {
        self.targets.as_ref()
    }

    /// Set the bsp sources params's targets.
    pub fn set_targets(&mut self, targets: Vec<BuildTargetIdentifier>) {
        self.targets = targets;
    }
}

#[derive(Debug, Default, Serialize, Deserialize)]
pub struct BTSourcesResult {
    items: Vec<BTSourcesCollection>,
}

impl BTSourcesResult {
    pub fn new(items: Vec<BTSourcesCollection>) -> Self {
        Self { items }
    }

    /// Get a reference to the bsp sources result's items.
    pub fn items(&self) -> &[BTSourcesCollection] {
        self.items.as_ref()
    }

    /// Set the bsp sources result's items.
    pub fn set_items(&mut self, items: Vec<BTSourcesCollection>) {
        self.items = items;
    }
}

#[derive(Debug, Default, Serialize, Deserialize)]
pub struct BTSourcesCollection {
    target: BuildTargetIdentifier,

    /// The text documents and directories that belong to this build target.
    sources: Vec<BTSourcesItem>,
}

impl BTSourcesCollection {
    pub fn new(target: BuildTargetIdentifier, sources: Vec<BTSourcesItem>) -> Self {
        Self { target, sources }
    }

    /// Get a reference to the bsp sources collection's target.
    pub fn target(&self) -> &BuildTargetIdentifier {
        &self.target
    }

    /// Set the bsp sources collection's target.
    pub fn set_target(&mut self, target: BuildTargetIdentifier) {
        self.target = target;
    }

    /// Get a reference to the bsp sources collection's sources.
    pub fn sources(&self) -> &[BTSourcesItem] {
        self.sources.as_ref()
    }

    /// Set the bsp sources collection's sources.
    pub fn set_sources(&mut self, sources: Vec<BTSourcesItem>) {
        self.sources = sources;
    }
}

#[derive(Debug, Default, Serialize, Deserialize)]
pub struct BTSourcesItem {
    /// Either a text document or a directory. A directory entry must end with a
    /// forward slash "/" and a directory entry implies that every nested text
    /// document within the directory belongs to this source item.
    uri: String,

    /// Type of file of the source item, such as whether it is file or directory.
    kind: BTSourceItemKind,

    /// Indicates if this source is automatically generated by the build and is
    /// not intended to be manually edited by the user.
    generated: bool,
}

impl BTSourcesItem {
    pub fn new(uri: String, kind: BTSourceItemKind, generated: bool) -> Self {
        Self {
            uri,
            kind,
            generated,
        }
    }

    /// Get a reference to the bsp sources item's kind.
    pub fn kind(&self) -> &BTSourceItemKind {
        &self.kind
    }

    /// Set the bsp sources item's kind.
    pub fn set_kind(&mut self, kind: BTSourceItemKind) {
        self.kind = kind;
    }

    /// Get a reference to the bsp sources item's uri.
    pub fn uri(&self) -> &str {
        self.uri.as_ref()
    }

    /// Set the bsp sources item's uri.
    pub fn set_uri(&mut self, uri: String) {
        self.uri = uri;
    }

    /// Get the bsp sources item's generated.
    pub fn generated(&self) -> bool {
        self.generated
    }

    /// Set the bsp sources item's generated.
    pub fn set_generated(&mut self, generated: bool) {
        self.generated = generated;
    }
}

#[derive(Debug, Serialize, Deserialize)]
pub enum BTSourceItemKind {
    /// The source item references a normal file.
    File = 1,
    /// The source item references a directory.
    Directory = 2,
}

impl Default for BTSourceItemKind {
    fn default() -> Self {
        Self::File
    }
}
